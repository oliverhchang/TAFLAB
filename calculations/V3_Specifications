import numpy as np
import matplotlib.pyplot as plt

# === Constants ===
g = 9.81  # gravity [m/s^2]
rho_sand = 1922  # wet sand [kg/m^3]
rho_steel = 7850  # 1008 CR Steel [kg/m^3]

# === Pendulum Geometry ===
r = 0.1016  # radius [m] (4 in)
l = 8 * 0.0254  # length [m] (8 in)
d = 5.75 * 0.0254  # offset from shaft [m] (5.75 in)
theta_deg = 37.5
theta_rad = np.radians(theta_deg)

# === Pendulum Properties ===
volume_cyl = np.pi * r ** 2 * l
mass = rho_sand * volume_cyl
I_cm = 0.5 * mass * r ** 2
I_pendulum = I_cm + mass * d ** 2
torque_available = mass * g * d * np.sin(theta_rad)
PE_max = mass * g * d * (1 - np.cos(theta_rad))
omega_max = np.sqrt(2 * PE_max / I_pendulum)
rpm_max = omega_max * 60 / (2 * np.pi)

# === Generator Specs ===
ke = 0.05  # V/RPM back-EMF constant for 23HS45-4204S
I_rotor = 6.8e-5  # motor inertia [kg·m²]
V_charge = 5   # Charge Voltage [V]
eta = 0.3  # mechanical to electrical efficiency
battery_capacity_Ah = 10.0  # 10,000 mAh battery

# === Electrical Load Specs ===
R_int = 3.0  # Stepper internal resistance [ohms]
R_load = 20.0  # Match label in print statement
V_gen = V_charge

# === Electrical Power Calculation Based on Load ===
I_actual = V_gen / (R_int + R_load)
V_load = I_actual * R_load
P_elec = V_gen * I_actual
P_mech = P_elec / eta if eta != 0 else 0
I_charge = I_actual
time_to_charge_hr = battery_capacity_Ah / I_charge

# === Motor Angular Velocity ===
rpm_motor = V_gen / ke
omega_motor = 2 * np.pi * rpm_motor / 60
torque_continuous = P_mech / omega_motor

# === Gear Ratio ===
ratio = rpm_motor / rpm_max

# === Flywheel Design Parameters (Fixed Thickness) ===
thickness = 0.0254 * 0.25  # 0.25 in = 6.35 mm
T_half = np.pi / omega_max
E_target = P_mech * T_half
I_flywheel_needed = (2 * E_target) / (omega_motor ** 2)
R_fly = ((2 * I_flywheel_needed) / (rho_steel * np.pi * thickness)) ** 0.25
mass_flywheel = rho_steel * np.pi * R_fly ** 2 * thickness
E_flywheel = 0.5 * I_flywheel_needed * omega_motor ** 2

# === Startup Time: Energy-Based Calculation ===
I_motor_side = I_flywheel_needed + I_rotor
I_total_pendulum_side = I_pendulum + (I_motor_side * ratio ** 2)
torque_avg = 0.5 * mass * g * d * np.sin(theta_rad)
alpha_avg = torque_avg / I_total_pendulum_side
omega_total = np.sqrt(2 * PE_max / I_total_pendulum_side)
startup_time = omega_total / alpha_avg

# === Startup Torque Check ===
alpha_motor_needed = omega_motor / startup_time
alpha_pendulum_needed = alpha_motor_needed / ratio
torque_for_accel = I_total_pendulum_side * alpha_pendulum_needed
torque_load_reflected = torque_continuous * ratio
torque_total_needed = torque_for_accel + torque_load_reflected
margin = torque_available - torque_total_needed

# === Print Results ===
print("--- CALCULATIONS FOR NOMINAL R_load = 10.0 Ohms ---")
print("=== Pendulum Analysis ===")
print(f"Pendulum mass: {mass:.1f} kg")
print(f"Moment of inertia: {I_pendulum:.4f} kg·m²")
print(f"Static torque @ {theta_deg}°: {torque_available:.2f} Nm")
print(f"Max swing speed: {rpm_max:.1f} RPM")
print(f"Half stroke period: {T_half:.3f} s\n")

print("=== Generator + Load ===")
print(f"Load resistance: {R_load:.2f} ohms")
print(f"Current draw: {I_actual:.3f} A")
print(f"Total electrical power generated: {P_elec:.2f} W")
print(f"Mechanical power required: {P_mech:.2f} W")
print(f"Time to charge 10Ah battery: {time_to_charge_hr:.1f} hours")
print(f"Motor speed needed: {rpm_motor:.0f} RPM")
print(f"Continuous load torque: {torque_continuous:.3f} Nm\n")

print("=== Gearing & Flywheel ===")
print(f"Required Gear Ratio (pendulum: motor): 1:{ratio:.2f}")
print(f"Flywheel inertia needed: {I_flywheel_needed:.4f} kg·m²")
print(f"Flywheel mass (t={thickness * 1000:.1f} mm): {mass_flywheel:.2f} kg")
print(f"Flywheel radius: {R_fly * 100:.1f} cm")
print(f"Flywheel stored energy: {E_flywheel:.2f} J\n")

print("=== Startup Torque Check ===")
print(f"Calculated startup time: {startup_time:.3f} s")
print(f"System inertia (reflected to pendulum): {I_total_pendulum_side:.4f} kg·m²")
print(f"Torque for acceleration: {torque_for_accel:.3f} Nm")
print(f"Reflected load torque: {torque_load_reflected:.3f} Nm")
print(f"Total startup torque needed: {torque_total_needed:.3f} Nm")
print(f"Available pendulum torque: {torque_available:.3f} Nm")
print(f"Safety margin: {margin:.3f} Nm")
